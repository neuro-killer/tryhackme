import paho.mqtt.client as mqtt
import time
import sys # Added for sys.exit

HOST = "10.10.186.2"
PORT = 1883

def on_connect(client, userdata, flags, rc):
    """Callback for when the client connects to the MQTT broker."""
    if rc == 0:
        print(f"[*] Connected to MQTT broker at {HOST}:{PORT}")
        # Subscribe to all topics
        client.subscribe('#', qos=1)
        print("[*] Subscribed to all topics (#) with QOS 1.")
        # Subscribing to $SYS/index.html# is redundant and likely ineffective.
        # $SYS topics typically contain broker status information.
        # client.subscribe('$SYS/index.html#') 
    else:
        print(f"[!] Failed to connect, return code: {rc}")
        sys.exit(1) # Exit if connection fails

def on_message(client, userdata, message):
    """Callback for when a message is received from the broker."""
    try:
        # Decode payload to string, assuming UTF-8. Handle errors.
        payload = message.payload.decode('utf-8', errors='ignore')
        print(f"Topic: {message.topic} | QOS: {message.qos} | Message: {payload}")
    except Exception as e:
        print(f"[!] Error processing message on topic {message.topic}: {e}")
        print(f"Raw message payload (bytes): {message.payload}")

def main():
    """Main function to set up and run the MQTT client."""
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message

    try:
        client.connect(HOST, PORT, 60) # Added keepalive=60 seconds
    except ConnectionRefusedError:
        print(f"[!] Connection refused. Is the MQTT broker running on {HOST}:{PORT}?")
        sys.exit(1)
    except Exception as e:
        print(f"[!] An error occurred during connection: {e}")
        sys.exit(1)

    # Use loop_forever() to block and listen for messages indefinitely.
    # This is more robust than loop_start() followed by a sleep or manual loop.
    print("[*] Starting MQTT client loop. Press Ctrl+C to exit.")
    try:
        client.loop_forever()
    except KeyboardInterrupt:
        print("\n[*] Disconnecting from MQTT broker.")
        client.disconnect()
        print("[*] Exited.")

if __name__ == "__main__":
    main()
